// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PowerPlant.Api.Data;

#nullable disable

namespace PowerPlant.Api.Migrations
{
    [DbContext(typeof(PowerPlantContext))]
    partial class PowerPlantContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PowerPlant.Api.Entities.EnergyBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("NextServiceDate")
                        .HasColumnType("date");

                    b.Property<int>("SensorsCount")
                        .HasColumnType("integer");

                    b.Property<int>("StationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("EnergyBlocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 29, 1, 12, 52, 370, DateTimeKind.Utc).AddTicks(3197),
                            Name = "Энергоблок 1.1",
                            NextServiceDate = new DateOnly(2026, 1, 29),
                            SensorsCount = 42,
                            StationId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 29, 1, 12, 52, 370, DateTimeKind.Utc).AddTicks(3773),
                            Name = "Энергоблок 1.2",
                            NextServiceDate = new DateOnly(2026, 7, 29),
                            SensorsCount = 35,
                            StationId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 29, 1, 12, 52, 370, DateTimeKind.Utc).AddTicks(3777),
                            Name = "Энергоблок 2.1",
                            NextServiceDate = new DateOnly(2026, 4, 29),
                            SensorsCount = 50,
                            StationId = 2
                        });
                });

            modelBuilder.Entity("PowerPlant.Api.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("PowerPlant.Api.Entities.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 29, 1, 12, 52, 370, DateTimeKind.Utc).AddTicks(2478),
                            Name = "Станция 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 29, 1, 12, 52, 370, DateTimeKind.Utc).AddTicks(2816),
                            Name = "Станция 2"
                        });
                });

            modelBuilder.Entity("PowerPlant.Api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "tanchikipro7777777@gmail.com",
                            FirstName = "Админ",
                            PasswordHash = "$2a$11$KT.RdCMwoSLLyBK.S.XtmO0Y8hEmIvs9eXmwWrjtUzpCEkDslpMUq",
                            Patronymic = "",
                            RoleId = 1,
                            Surname = "Главный"
                        },
                        new
                        {
                            Id = 2,
                            Email = "cheburashka@gmail.com",
                            FirstName = "Пользователь",
                            PasswordHash = "$2a$11$/9PvQxEu8pBfXPGDdAZrFO9j6WPYP5vb3c7aSJvaJpivUOdlCwP0K",
                            Patronymic = "",
                            RoleId = 2,
                            Surname = "Простой"
                        });
                });

            modelBuilder.Entity("PowerPlant.Api.Entities.EnergyBlock", b =>
                {
                    b.HasOne("PowerPlant.Api.Entities.Station", "Station")
                        .WithMany("EnergyBlocks")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("PowerPlant.Api.Entities.User", b =>
                {
                    b.HasOne("PowerPlant.Api.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PowerPlant.Api.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PowerPlant.Api.Entities.Station", b =>
                {
                    b.Navigation("EnergyBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
